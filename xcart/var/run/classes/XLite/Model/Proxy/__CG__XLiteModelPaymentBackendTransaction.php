<?php

namespace XLite\Model\Proxy\__CG__\XLite\Model\Payment;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class BackendTransaction extends \XLite\Model\Payment\BackendTransaction implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }

    /**
     * {@inheritDoc}
     * @param string $name
     */
    public function __get($name)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__get', [$name]);

        return parent::__get($name);
    }

    /**
     * {@inheritDoc}
     * @param string $name
     * @param mixed  $value
     */
    public function __set($name, $value)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__set', [$name, $value]);

        return parent::__set($name, $value);
    }

    /**
     * {@inheritDoc}
     * @param  string $name
     * @return boolean
     */
    public function __isset($name)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__isset', [$name]);

        return parent::__isset($name);

    }

    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'date', 'status', 'value', 'type', 'payment_transaction', 'data', '_previous_state'];
        }

        return ['__isInitialized__', 'id', 'date', 'status', 'value', 'type', 'payment_transaction', 'data', '_previous_state'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (BackendTransaction $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function hasCustomAmount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasCustomAmount', []);

        return parent::hasCustomAmount();
    }

    /**
     * {@inheritDoc}
     */
    public function setCustomAmountCapturePart($amount)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCustomAmountCapturePart', [$amount]);

        return parent::setCustomAmountCapturePart($amount);
    }

    /**
     * {@inheritDoc}
     */
    public function setCustomAmountCaptureMulti($amount)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCustomAmountCaptureMulti', [$amount]);

        return parent::setCustomAmountCaptureMulti($amount);
    }

    /**
     * {@inheritDoc}
     */
    public function getMaxCaptureAmount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMaxCaptureAmount', []);

        return parent::getMaxCaptureAmount();
    }

    /**
     * {@inheritDoc}
     */
    public function isAccept()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isAccept', []);

        return parent::isAccept();
    }

    /**
     * {@inheritDoc}
     */
    public function isDecline()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isDecline', []);

        return parent::isDecline();
    }

    /**
     * {@inheritDoc}
     */
    public function getChargeValueModifier()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChargeValueModifier', []);

        return parent::getChargeValueModifier();
    }

    /**
     * {@inheritDoc}
     */
    public function getPaymentMethod()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPaymentMethod', []);

        return parent::getPaymentMethod();
    }

    /**
     * {@inheritDoc}
     */
    public function isSucceed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isSucceed', []);

        return parent::isSucceed();
    }

    /**
     * {@inheritDoc}
     */
    public function isFailed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isFailed', []);

        return parent::isFailed();
    }

    /**
     * {@inheritDoc}
     */
    public function isCompleted()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isCompleted', []);

        return parent::isCompleted();
    }

    /**
     * {@inheritDoc}
     */
    public function isRefund()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isRefund', []);

        return parent::isRefund();
    }

    /**
     * {@inheritDoc}
     */
    public function isFullRefund()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isFullRefund', []);

        return parent::isFullRefund();
    }

    /**
     * {@inheritDoc}
     */
    public function isCapture()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isCapture', []);

        return parent::isCapture();
    }

    /**
     * {@inheritDoc}
     */
    public function isVoid()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isVoid', []);

        return parent::isVoid();
    }

    /**
     * {@inheritDoc}
     */
    public function getReadableStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReadableStatus', []);

        return parent::getReadableStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function isOperationAllowed($operation)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isOperationAllowed', [$operation]);

        return parent::isOperationAllowed($operation);
    }

    /**
     * {@inheritDoc}
     */
    public function isInitial()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isInitial', []);

        return parent::isInitial();
    }

    /**
     * {@inheritDoc}
     */
    public function setDataCell($name, $value, $label = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDataCell', [$name, $value, $label]);

        return parent::setDataCell($name, $value, $label);
    }

    /**
     * {@inheritDoc}
     */
    public function getDataCell($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDataCell', [$name]);

        return parent::getDataCell($name);
    }

    /**
     * {@inheritDoc}
     */
    public function registerTransactionInOrderHistory($suffix = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'registerTransactionInOrderHistory', [$suffix]);

        return parent::registerTransactionInOrderHistory($suffix);
    }

    /**
     * {@inheritDoc}
     */
    public function getHistoryEventDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHistoryEventDescription', []);

        return parent::getHistoryEventDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function getHistoryEventDescriptionData()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHistoryEventDescriptionData', []);

        return parent::getHistoryEventDescriptionData();
    }

    /**
     * {@inheritDoc}
     */
    public function getEventData()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEventData', []);

        return parent::getEventData();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setDate($date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDate', [$date]);

        return parent::setDate($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDate', []);

        return parent::getDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', [$status]);

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', []);

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setValue($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setValue', [$value]);

        return parent::setValue($value);
    }

    /**
     * {@inheritDoc}
     */
    public function getValue()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getValue', []);

        return parent::getValue();
    }

    /**
     * {@inheritDoc}
     */
    public function setType($type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', [$type]);

        return parent::setType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', []);

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function setPaymentTransaction(\XLite\Model\Payment\Transaction $paymentTransaction = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPaymentTransaction', [$paymentTransaction]);

        return parent::setPaymentTransaction($paymentTransaction);
    }

    /**
     * {@inheritDoc}
     */
    public function getPaymentTransaction()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPaymentTransaction', []);

        return parent::getPaymentTransaction();
    }

    /**
     * {@inheritDoc}
     */
    public function addData(\XLite\Model\Payment\BackendTransactionData $data)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addData', [$data]);

        return parent::addData($data);
    }

    /**
     * {@inheritDoc}
     */
    public function getData()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getData', []);

        return parent::getData();
    }

    /**
     * {@inheritDoc}
     */
    public function setCustomAmount($amount)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCustomAmount', [$amount]);

        return parent::setCustomAmount($amount);
    }

    /**
     * {@inheritDoc}
     */
    public function setCustomAmountRefundPart($amount)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCustomAmountRefundPart', [$amount]);

        return parent::setCustomAmountRefundPart($amount);
    }

    /**
     * {@inheritDoc}
     */
    public function setCustomAmountRefundMulti($amount)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCustomAmountRefundMulti', [$amount]);

        return parent::setCustomAmountRefundMulti($amount);
    }

    /**
     * {@inheritDoc}
     */
    public function getMaxRefundAmount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMaxRefundAmount', []);

        return parent::getMaxRefundAmount();
    }

    /**
     * {@inheritDoc}
     */
    public function getParentValue()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParentValue', []);

        return parent::getParentValue();
    }

    /**
     * {@inheritDoc}
     */
    public function buildDataForREST($withAssociations = true)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'buildDataForREST', [$withAssociations]);

        return parent::buildDataForREST($withAssociations);
    }

    /**
     * {@inheritDoc}
     */
    public function getModelAssociationsForREST()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getModelAssociationsForREST', []);

        return parent::getModelAssociationsForREST();
    }

    /**
     * {@inheritDoc}
     */
    public function _getPreviousState()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '_getPreviousState', []);

        return parent::_getPreviousState();
    }

    /**
     * {@inheritDoc}
     */
    public function map(array $data)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'map', [$data]);

        return parent::map($data);
    }

    /**
     * {@inheritDoc}
     */
    public function __unset($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__unset', [$name]);

        return parent::__unset($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getRepository()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRepository', []);

        return parent::getRepository();
    }

    /**
     * {@inheritDoc}
     */
    public function checkCache()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'checkCache', []);

        return parent::checkCache();
    }

    /**
     * {@inheritDoc}
     */
    public function detach()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'detach', []);

        return parent::detach();
    }

    /**
     * {@inheritDoc}
     */
    public function __call($method, array $args = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__call', [$method, $args]);

        return parent::__call($method, $args);
    }

    /**
     * {@inheritDoc}
     */
    public function isPropertyExists($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isPropertyExists', [$name]);

        return parent::isPropertyExists($name);
    }

    /**
     * {@inheritDoc}
     */
    public function setterProperty($property, $value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setterProperty', [$property, $value]);

        return parent::setterProperty($property, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function getterProperty($property)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getterProperty', [$property]);

        return parent::getterProperty($property);
    }

    /**
     * {@inheritDoc}
     */
    public function isPersistent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isPersistent', []);

        return parent::isPersistent();
    }

    /**
     * {@inheritDoc}
     */
    public function isDetached()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isDetached', []);

        return parent::isDetached();
    }

    /**
     * {@inheritDoc}
     */
    public function isManaged()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isManaged', []);

        return parent::isManaged();
    }

    /**
     * {@inheritDoc}
     */
    public function getUniqueIdentifierName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUniqueIdentifierName', []);

        return parent::getUniqueIdentifierName();
    }

    /**
     * {@inheritDoc}
     */
    public function getUniqueIdentifier()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUniqueIdentifier', []);

        return parent::getUniqueIdentifier();
    }

    /**
     * {@inheritDoc}
     */
    public function getEntityName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEntityName', []);

        return parent::getEntityName();
    }

    /**
     * {@inheritDoc}
     */
    public function getFieldMetadata($property)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFieldMetadata', [$property]);

        return parent::getFieldMetadata($property);
    }

    /**
     * {@inheritDoc}
     */
    public function update()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'update', []);

        return parent::update();
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'create', []);

        return parent::create();
    }

    /**
     * {@inheritDoc}
     */
    public function delete()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'delete', []);

        return parent::delete();
    }

    /**
     * {@inheritDoc}
     */
    public function processFiles($field, array $data)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'processFiles', [$field, $data]);

        return parent::processFiles($field, $data);
    }

    /**
     * {@inheritDoc}
     */
    public function cloneEntity()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'cloneEntity', []);

        return parent::cloneEntity();
    }

    /**
     * {@inheritDoc}
     */
    public function getFieldsDefinition($class = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFieldsDefinition', [$class]);

        return parent::getFieldsDefinition($class);
    }

    /**
     * {@inheritDoc}
     */
    public function prepareEntityBeforeCommit($type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'prepareEntityBeforeCommit', [$type]);

        return parent::prepareEntityBeforeCommit($type);
    }

    /**
     * {@inheritDoc}
     */
    public function isSerializable()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isSerializable', []);

        return parent::isSerializable();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

}
