<?php

namespace XLite\Model\Proxy\__CG__\XLite\Model;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class ViewList extends \XLite\Model\ViewList implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }

    /**
     * {@inheritDoc}
     * @param string $name
     */
    public function __get($name)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__get', [$name]);

        return parent::__get($name);
    }

    /**
     * {@inheritDoc}
     * @param string $name
     * @param mixed  $value
     */
    public function __set($name, $value)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__set', [$name, $value]);

        return parent::__set($name, $value);
    }

    /**
     * {@inheritDoc}
     * @param  string $name
     * @return boolean
     */
    public function __isset($name)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__isset', [$name]);

        return parent::__isset($name);

    }

    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'list_id', 'parent', 'variants', 'list', 'zone', 'child', 'weight', 'tpl', 'version', 'preset', 'list_override', 'weight_override', 'override_mode', 'deleted', '_previous_state'];
        }

        return ['__isInitialized__', 'list_id', 'parent', 'variants', 'list', 'zone', 'child', 'weight', 'tpl', 'version', 'preset', 'list_override', 'weight_override', 'override_mode', 'deleted', '_previous_state'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (ViewList $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function isDisplayed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isDisplayed', []);

        return parent::isDisplayed();
    }

    /**
     * {@inheritDoc}
     */
    public function getHashWithoutZone()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHashWithoutZone', []);

        return parent::getHashWithoutZone();
    }

    /**
     * {@inheritDoc}
     */
    public function prepareBeforeCreate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'prepareBeforeCreate', []);

        return parent::prepareBeforeCreate();
    }

    /**
     * {@inheritDoc}
     */
    public function prepareBeforeRemove()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'prepareBeforeRemove', []);

        return parent::prepareBeforeRemove();
    }

    /**
     * {@inheritDoc}
     */
    public function getListId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getListId', []);

        return parent::getListId();
    }

    /**
     * {@inheritDoc}
     */
    public function setParent(\XLite\Model\ViewList $parent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParent', [$parent]);

        return parent::setParent($parent);
    }

    /**
     * {@inheritDoc}
     */
    public function getParent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParent', []);

        return parent::getParent();
    }

    /**
     * {@inheritDoc}
     */
    public function deleteParent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'deleteParent', []);

        return parent::deleteParent();
    }

    /**
     * {@inheritDoc}
     */
    public function setList($list)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setList', [$list]);

        return parent::setList($list);
    }

    /**
     * {@inheritDoc}
     */
    public function getList()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getList', []);

        return parent::getList();
    }

    /**
     * {@inheritDoc}
     */
    public function setZone($zone)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setZone', [$zone]);

        return parent::setZone($zone);
    }

    /**
     * {@inheritDoc}
     */
    public function getZone()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getZone', []);

        return parent::getZone();
    }

    /**
     * {@inheritDoc}
     */
    public function setChild($child)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setChild', [$child]);

        return parent::setChild($child);
    }

    /**
     * {@inheritDoc}
     */
    public function getChild()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChild', []);

        return parent::getChild();
    }

    /**
     * {@inheritDoc}
     */
    public function setWeight($weight)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWeight', [$weight]);

        return parent::setWeight($weight);
    }

    /**
     * {@inheritDoc}
     */
    public function getWeight()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWeight', []);

        return parent::getWeight();
    }

    /**
     * {@inheritDoc}
     */
    public function setTpl($tpl)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTpl', [$tpl]);

        return parent::setTpl($tpl);
    }

    /**
     * {@inheritDoc}
     */
    public function getTpl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTpl', []);

        return parent::getTpl();
    }

    /**
     * {@inheritDoc}
     */
    public function setVersion($version)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVersion', [$version]);

        return parent::setVersion($version);
    }

    /**
     * {@inheritDoc}
     */
    public function getVersion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVersion', []);

        return parent::getVersion();
    }

    /**
     * {@inheritDoc}
     */
    public function setListOverride($listOverride)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setListOverride', [$listOverride]);

        return parent::setListOverride($listOverride);
    }

    /**
     * {@inheritDoc}
     */
    public function getListOverride()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getListOverride', []);

        return parent::getListOverride();
    }

    /**
     * {@inheritDoc}
     */
    public function setWeightOverride($weightOverride)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWeightOverride', [$weightOverride]);

        return parent::setWeightOverride($weightOverride);
    }

    /**
     * {@inheritDoc}
     */
    public function getWeightOverride()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWeightOverride', []);

        return parent::getWeightOverride();
    }

    /**
     * {@inheritDoc}
     */
    public function setPreset($preset)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPreset', [$preset]);

        return parent::setPreset($preset);
    }

    /**
     * {@inheritDoc}
     */
    public function getPreset()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPreset', []);

        return parent::getPreset();
    }

    /**
     * {@inheritDoc}
     */
    public function getDeleted()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDeleted', []);

        return parent::getDeleted();
    }

    /**
     * {@inheritDoc}
     */
    public function setDeleted($deleted)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDeleted', [$deleted]);

        return parent::setDeleted($deleted);
    }

    /**
     * {@inheritDoc}
     */
    public function getVariants()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVariants', []);

        return parent::getVariants();
    }

    /**
     * {@inheritDoc}
     */
    public function addVariant(\XLite\Model\ViewList $entity)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addVariant', [$entity]);

        return parent::addVariant($entity);
    }

    /**
     * {@inheritDoc}
     */
    public function removeVariant(\XLite\Model\ViewList $entity)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeVariant', [$entity]);

        return parent::removeVariant($entity);
    }

    /**
     * {@inheritDoc}
     */
    public function getListActual()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getListActual', []);

        return parent::getListActual();
    }

    /**
     * {@inheritDoc}
     */
    public function getWeightActual()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWeightActual', []);

        return parent::getWeightActual();
    }

    /**
     * {@inheritDoc}
     */
    public function isHidden()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isHidden', []);

        return parent::isHidden();
    }

    /**
     * {@inheritDoc}
     */
    public function applyOverrides($mode, $list = NULL, $weight = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'applyOverrides', [$mode, $list, $weight]);

        return parent::applyOverrides($mode, $list, $weight);
    }

    /**
     * {@inheritDoc}
     */
    public function mapOverrides(\XLite\Model\ViewList $other)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'mapOverrides', [$other]);

        return parent::mapOverrides($other);
    }

    /**
     * {@inheritDoc}
     */
    public function isViewListModuleEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isViewListModuleEnabled', []);

        return parent::isViewListModuleEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setOverrideMode($overrideMode)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOverrideMode', [$overrideMode]);

        return parent::setOverrideMode($overrideMode);
    }

    /**
     * {@inheritDoc}
     */
    public function getOverrideMode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOverrideMode', []);

        return parent::getOverrideMode();
    }

    /**
     * {@inheritDoc}
     */
    public function buildDataForREST($withAssociations = true)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'buildDataForREST', [$withAssociations]);

        return parent::buildDataForREST($withAssociations);
    }

    /**
     * {@inheritDoc}
     */
    public function getModelAssociationsForREST()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getModelAssociationsForREST', []);

        return parent::getModelAssociationsForREST();
    }

    /**
     * {@inheritDoc}
     */
    public function _getPreviousState()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '_getPreviousState', []);

        return parent::_getPreviousState();
    }

    /**
     * {@inheritDoc}
     */
    public function map(array $data)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'map', [$data]);

        return parent::map($data);
    }

    /**
     * {@inheritDoc}
     */
    public function __unset($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__unset', [$name]);

        return parent::__unset($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getRepository()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRepository', []);

        return parent::getRepository();
    }

    /**
     * {@inheritDoc}
     */
    public function checkCache()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'checkCache', []);

        return parent::checkCache();
    }

    /**
     * {@inheritDoc}
     */
    public function detach()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'detach', []);

        return parent::detach();
    }

    /**
     * {@inheritDoc}
     */
    public function __call($method, array $args = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__call', [$method, $args]);

        return parent::__call($method, $args);
    }

    /**
     * {@inheritDoc}
     */
    public function isPropertyExists($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isPropertyExists', [$name]);

        return parent::isPropertyExists($name);
    }

    /**
     * {@inheritDoc}
     */
    public function setterProperty($property, $value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setterProperty', [$property, $value]);

        return parent::setterProperty($property, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function getterProperty($property)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getterProperty', [$property]);

        return parent::getterProperty($property);
    }

    /**
     * {@inheritDoc}
     */
    public function isPersistent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isPersistent', []);

        return parent::isPersistent();
    }

    /**
     * {@inheritDoc}
     */
    public function isDetached()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isDetached', []);

        return parent::isDetached();
    }

    /**
     * {@inheritDoc}
     */
    public function isManaged()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isManaged', []);

        return parent::isManaged();
    }

    /**
     * {@inheritDoc}
     */
    public function getUniqueIdentifierName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUniqueIdentifierName', []);

        return parent::getUniqueIdentifierName();
    }

    /**
     * {@inheritDoc}
     */
    public function getUniqueIdentifier()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUniqueIdentifier', []);

        return parent::getUniqueIdentifier();
    }

    /**
     * {@inheritDoc}
     */
    public function getEntityName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEntityName', []);

        return parent::getEntityName();
    }

    /**
     * {@inheritDoc}
     */
    public function getFieldMetadata($property)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFieldMetadata', [$property]);

        return parent::getFieldMetadata($property);
    }

    /**
     * {@inheritDoc}
     */
    public function update()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'update', []);

        return parent::update();
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'create', []);

        return parent::create();
    }

    /**
     * {@inheritDoc}
     */
    public function delete()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'delete', []);

        return parent::delete();
    }

    /**
     * {@inheritDoc}
     */
    public function processFiles($field, array $data)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'processFiles', [$field, $data]);

        return parent::processFiles($field, $data);
    }

    /**
     * {@inheritDoc}
     */
    public function cloneEntity()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'cloneEntity', []);

        return parent::cloneEntity();
    }

    /**
     * {@inheritDoc}
     */
    public function getFieldsDefinition($class = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFieldsDefinition', [$class]);

        return parent::getFieldsDefinition($class);
    }

    /**
     * {@inheritDoc}
     */
    public function prepareEntityBeforeCommit($type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'prepareEntityBeforeCommit', [$type]);

        return parent::prepareEntityBeforeCommit($type);
    }

    /**
     * {@inheritDoc}
     */
    public function isSerializable()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isSerializable', []);

        return parent::isSerializable();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

}
