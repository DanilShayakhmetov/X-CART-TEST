/* vim: set ts=2 sw=2 sts=2 et: */

/**
 * Styles
 *
 * Copyright (c) 2001-present Qualiteam software Ltd. All rights reserved.
 * See https://www.x-cart.com/license-agreement.html for license details.
 */

//
// Forms
// --------------------------------------------------
.profile-form, .shipping-address-form{
  .password-difficulty {
    margin-left: 10px;
  }
}

.table-label-required {
  label:after {
    content: "*";
    color: red;
  }
}

.table-label ~ .star {
  display: none;
}

// Required for validationEngine
.input-field-wrapper {
  display: inline-block;
  width: 100%;
}

// Normalize non-controls
//
// Restyle and baseline non-control form elements.
input::-ms-clear {
    display: none;
}

fieldset {
  padding: 0;
  margin: 0;
  border: 0;
  // Chrome and Firefox set a `min-width: -webkit-min-content;` on fieldsets,
  // so we reset that to ensure it behaves more like a standard block element.
  // See https://github.com/twbs/bootstrap/issues/12359.
  min-width: 0;
}

legend {
  display: block;
  width: 100%;
  padding: 0;
  margin-bottom: @line-height-computed;
  font-size: (@font-size-base * 1.5);
  line-height: inherit;
  color: @legend-color;
  border: 0;
  border-bottom: 1px solid @legend-border-color;
}

label {
  display: inline-block;
  margin-bottom: 0;
  font-weight: normal;
}


// Normalize form controls
//
// While most of our form styles require extra classes, some basic normalization
// is required to ensure optimum display with or without those classes to better
// address browser inconsistencies.

// Override content-box in Normalize (* isn't specific enough)
input[type="search"] {
  .box-sizing(border-box);
}

// Position radios and checkboxes better
input[type="radio"],
input[type="checkbox"] {
  margin: 0;
}

// Set the height of file controls to match text inputs
input[type="file"] {
  display: block;
}

// Make range inputs behave like textual form controls
input[type="range"] {
  display: block;
  width: 100%;
}

// Make multiple select elements height not fixed
select[multiple],
select[size] {
  height: auto;
}

// Focus for file, radio, and checkbox
input[type="file"]:focus,
input[type="radio"]:focus,
input[type="checkbox"]:focus {
  outline: none;
}

// Adjust output element
output {
  display: block;
  padding-top: (@padding-base-vertical + 1);
  font-size: @font-size-base;
  line-height: @line-height-base;
  color: @input-color;
}


// Common form controls
//
// Shared size and type resets for form controls. Apply `.form-control` to any
// of the following form controls:
//
// select
// textarea
// input[type="text"]
// input[type="password"]
// input[type="datetime"]
// input[type="datetime-local"]
// input[type="date"]
// input[type="month"]
// input[type="time"]
// input[type="week"]
// input[type="number"]
// input[type="email"]
// input[type="url"]
// input[type="search"]
// input[type="tel"]
// input[type="color"]

.form-control {
  display: block;
  width: 100%;
  height: @input-height-base;
  line-height: @line-height-base;
  // height: auto; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
  padding: 0 (@padding-base-horizontal - 4);
  font-size: @font-size-base;
  // line-height: @line-height-base;
  color: @input-color;
  background-color: @input-bg;
  background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214

  border: @border-base solid @input-border;
  border-radius: @input-border-radius;
  margin-top: -1px;

  .box-shadow(none);
  .transition(~"border-color ease-in-out .15s, box-shadow ease-in-out .15s");

  // Customize the `:focus` state to imitate native WebKit styles.
  .form-control-focus();

  // Placeholder
  .placeholder();

  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &[disabled],
  &[readonly],
  select&.readonly-mark,
  fieldset[disabled] & {
    cursor: not-allowed;
    background-color: @input-bg-disabled;
    opacity: 1; // iOS fix for unreadable disabled content
  }

  // Reset height for `textarea`s
  textarea& {
    height: auto;
  }

  select&::-ms-expand {
    display: none;
  }

  select& {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    background: @input-bg url(../../images/arrow_down.svg);
    background-repeat: no-repeat;
    background-position: right 10px center;
    background-size: 14px 7px;
    padding-right: 25px;
  }
}

.form-control-label {
  .form-control;
  border-color: transparent;
}

.form-control.secondary {
  border-top: 0px;
  border-left: 0px;
  border-right: 0px;
  padding-left: 0px;
  padding-right: 0px;

  &:focus {
    outline: 0;
    .box-shadow(none);
  }
}

.floating-label-internal {
  & > .table-label,
  & > label:not(.checkbox-label):not(.rating) {
    z-index: 2;
    opacity: 1;
    pointer-events: none;
    position: absolute !important;
    transform: translate3d(0, 8px, 0) scale(1);
    transform-origin: left top;
    transition: 240ms;
    left: (@rhythmic-unit / 2 + 3);
    padding-top: 0px;
    margin-top: (@rhythmic-unit / 2);
    white-space: nowrap;
    line-height: @line-height-base;
  }

  &.focused > .table-label,
  &.focused > label:not(.checkbox-label){
    opacity: 1;
    transform: scale(0.8);
    color: @color-text-light;
  }

  .table-value {
    .tooltip-main {
      position: absolute;
      right: 20px;
      top: 10px;
    }
  }

  .has-success.has-success-mark {
    .icon-ok-mark;
    position: relative;
    &:before {
      top: 50%;
      transform: translateY(-50%);
      right: @rhythmic-unit;
      color: @state-success-bg;
      position: absolute;
    }
  }

  textarea.form-control {
    min-height: (@line-height-base * 4);
  }

  select.form-control {
    padding-left: (@padding-base-horizontal - 4);
    background-position: 96% 24px;
  }

  .form-control, .form-control-label {
    height: @input-height-base-floating;
    min-height: (@line-height-base * 3);
    padding-top: @line-height-base + @padding-base-vertical;
    padding-bottom: @padding-base-vertical;
    transition: all 240ms;

    :-ms-input-placeholder {
      font-size: @font-size-base;
    }

    // Placeholder
    .placeholder(transparent);
  }

  &.focused .form-control {
    .placeholder();
  }

  // Floating label textarea placeholder fix BUG-4912
  &:not(.focused) .form-control {
    .hide-placeholder();
  }

  .password-eye {
    width: @line-height-base;
    top: @line-height-base - 2;
    right: @line-height-base;
    font-size: @line-height-base;
  }
}

.not-floating label {
  line-height: @rhythmic-unit;
  margin-bottom: @rhythmic-unit / 2;
}

/**
 * Floating label inputs
 */
.floating-label {
  position: relative;

  &:not(.not-floating) {
    .floating-label-internal;
  }
}

.floating-label.secondary {
  & > .table-label,
  & > label:not(.checkbox-label):not(.rating) {
    transform: translate3d(0, 27px, 0) scale(1);
    left: 0px;
    margin-top: 0px;
  }

  &.focused > .table-label,
  &.focused > label:not(.checkbox-label){
    opacity: 1;
    transform: scale(0.8);
  }

  textarea.form-control {
    min-height: auto;
  }
}

.floating-label-textarea {
  & > .table-label,
  & > label:not(.checkbox-label) {
    background: @input-bg;
    box-shadow: 0 0 8px 2px @input-bg;
  }
}

.form-control-inverted {
  background: @color-contrast;
  color: @color-background;
}

// Search inputs in iOS
//
// This overrides the extra rounded corners on search inputs in iOS so that our
// `.form-control` class can properly style them. Note that this cannot simply
// be added to `.form-control` as it's not specific enough. For details, see
// https://github.com/twbs/bootstrap/issues/11586.

input[type="search"] {
  -webkit-appearance: none;
}

// Special styles for iOS date input
//
// In Mobile Safari, date inputs require a pixel line-height that matches the
// given height of the input.

input[type="date"] {
  line-height: @input-height-base;
}


// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.

.form-group {
  margin-bottom: 15px;
}


// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.

.radio,
.checkbox {
  display: block;
  min-height: @line-height-computed; // clear the floating input if there is no label text
  margin-top: 0;
  margin-bottom: 0;
  padding-left: 40px;
  label {
    display: inline;
    font-weight: normal;
    cursor: pointer;
    padding-left: 0;
  }
}

.radio + .radio,
.checkbox + .checkbox {
  margin-top: 20px;
}

.radio input[type="radio"],
.radio-inline input[type="radio"],
.checkbox input[type="checkbox"],
.checkbox-inline input[type="checkbox"] {
  line-height: @rhythmic-unit;
  float: left;
  margin-left: -40px;
  width: @rhythmic-unit;
  height: @rhythmic-unit;
}
.radio + .radio,
.checkbox + .checkbox {
  margin-top: -5px; // Move up sibling radios or checkboxes for tighter spacing
}

// Radios and checkboxes on same line
.radio-inline,
.checkbox-inline {
  display: inline-block;
  padding-left: 20px;
  margin-bottom: 0;
  vertical-align: middle;
  font-weight: normal;
  cursor: pointer;
}
.radio-inline + .radio-inline,
.checkbox-inline + .checkbox-inline {
  margin-top: 0;
  margin-left: 10px; // space out consecutive inline controls
}

// Apply same disabled cursor tweak as for inputs
//
// Note: Neither radios nor checkboxes can be readonly.
input[type="radio"],
input[type="checkbox"],
.radio,
.radio-inline,
.checkbox,
.checkbox-inline {
  &[disabled],
  fieldset[disabled] & {
    cursor: not-allowed;
  }
}

input[type="radio"] {
  height: 20px;
  width: 20px;
  line-height: 20px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;

  border-radius: 50%;
  border: 1px solid @input-contrast-border;
  background: @input-bg;
}

input[type="radio"]:checked {
  background: url(../../images/point_white.svg) center no-repeat, @color-highlight;
  background-size: 30%;
  border: none;
}
input[type="radio"]:focus {
  box-shadow: 0 0 0 @input-border-focus-size @input-border-focus;
}
// Fancy checkboxes
input[type="checkbox"] {
  height: 20px;
  width: 20px;
  line-height: 20px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;

  border-radius: @border-radius-base;
  border: 1px solid @input-contrast-border;
  background: @input-bg;
}

input[type="checkbox"]:checked {
  background: url(../../images/ok_mark_white.svg) center no-repeat, @color-highlight;
  background-size: 50%;
  border: none;
}
input[type="checkbox"]:focus {
  box-shadow: 0 0 0 2px #66afe9;
}
// Form control sizing
//
// Build on `.form-control` with modifier classes to decrease or increase the
// height and font-size of form controls.

.input-sm {
  .input-size(@input-height-small; @padding-small-vertical; @padding-small-horizontal; @font-size-small; @line-height-small; @border-radius-small);
}

.input-lg {
  .input-size(@input-height-large; @padding-large-vertical; @padding-large-horizontal; @font-size-large; @line-height-large; @border-radius-large);
}


// Form control feedback states
//
// Apply contextual and semantic states to individual form controls.

.has-feedback {
  // Enable absolute positioning
  position: relative;

  // Ensure icons don't overlap text
  .form-control {
    padding-right: (@input-height-base * 1.25);
  }

  // Feedback icon (requires .glyphicon classes)
  .form-control-feedback {
    position: absolute;
    top: (@line-height-computed + 5); // Height of the `label` and its margin
    right: 0;
    display: block;
    width: @input-height-base;
    height: @input-height-base;
    line-height: @input-height-base;
    text-align: center;
  }
}

// Feedback states
.has-success {
  .form-control-validation(@state-success-text; @state-success-border; @state-success-bg);
}
.has-warning {
  .form-control-validation(@state-warning-text; @state-warning-text; @state-warning-bg);
}
.has-error {
  .form-control-validation(@state-danger-text; @state-danger-text; @state-danger-bg);

  .tooltip-inner {
    background-color: #fef0f0 !important;
    border-color: #eaccd1 !important;
    margin-top: 0px;
    color: #c55a59 !important;
  }

  .tooltip.bottom {
    margin-top: 2px;

    .tooltip-arrow {
      border-bottom-color: #eaccd1 !important;
    }
  }

  .tooltip-arrow {
    display: block !important;
  }
}

// Tooltips
.tooltip-box {
  z-index: 1000000;
}

.tooltip-main .tooltip-inner {
  max-width: 500px;
  font-size: @font-size-small;
}

.tooltip-inner {
  text-align: left;
  background-color: @color-background;
  border: solid 1px @color-border;
  padding: 10px 14px;
  font-size: @font-size-small;
  color: @color-text-dark;
  white-space: normal;
  max-width: 250px;
  min-width: 100px;
  overflow: hidden;
  margin-top: 2px;
}

.tooltip.in {
  opacity: 1;
}

.tooltip-arrow {
  display: none !important;
}

// Static form control text
//
// Apply class to a `p` element to make any string of text align with labels in
// a horizontal form layout.

.form-control-static {
  margin-bottom: 0; // Remove default margin from `p`
}


// Help text
//
// Apply to any element you wish to create light text for placement immediately
// below a form control. Use for general help, formatting, or instructional text.

.help-block {
  display: block; // account for any element using help-block
  margin-top: 5px;
  margin-bottom: 10px;
  color: lighten(@text-color, 25%); // lighten the text some for contrast
}



// Inline forms
//
// Make forms appear inline(-block) by adding the `.form-inline` class. Inline
// forms begin stacked on extra small (mobile) devices and then go inline when
// viewports reach <768px.
//
// Requires wrapping inputs and labels with `.form-group` for proper display of
// default HTML form controls and our custom form controls (e.g., input groups).
//
// Heads up! This is mixin-ed into `.navbar-form` in navbars.less.

.form-inline {

  // Kick in the inline
  @media (min-width: @screen-sm-min) {
    // Inline-block all the things for "inline"
    .form-group {
      display: inline-block;
      margin-bottom: 0;
      vertical-align: middle;
    }

    // In navbar-form, allow folks to *not* use `.form-group`
    .form-control {
      display: inline-block;
      width: auto; // Prevent labels from stacking above inputs in `.form-group`
      vertical-align: middle;
    }
    // Input groups need that 100% width though
    .input-group > .form-control {
      width: 100%;
    }

    .control-label {
      margin-bottom: 0;
      vertical-align: middle;
    }

    // Remove default margin on radios/checkboxes that were used for stacking, and
    // then undo the floating of radios and checkboxes to match (which also avoids
    // a bug in WebKit: https://github.com/twbs/bootstrap/issues/1969).
    .radio,
    .checkbox {
      display: inline-block;
      margin-top: 0;
      margin-bottom: 0;
      padding-left: 0;
      vertical-align: middle;
    }
    .radio input[type="radio"],
    .checkbox input[type="checkbox"] {
      float: none;
      margin-left: 0;
    }

    // Validation states
    //
    // Reposition the icon because it's now within a grid column and columns have
    // `position: relative;` on them. Also accounts for the grid gutter padding.
    .has-feedback .form-control-feedback {
      top: 0;
    }
  }
}


// Horizontal forms
//
// Horizontal forms are built on grid classes and allow you to create forms with
// labels on the left and inputs on the right.

.form-horizontal {

  // Consistent vertical alignment of labels, radios, and checkboxes
  .control-label,
  .radio,
  .checkbox,
  .radio-inline,
  .checkbox-inline {
    margin-top: 0;
    margin-bottom: 0;
    padding-top: (@padding-base-vertical + 1); // Default padding plus a border
  }
  // Account for padding we're adding to ensure the alignment and of help text
  // and other content below items
  .radio,
  .checkbox {
    min-height: (@line-height-computed + (@padding-base-vertical + 1));
  }

  // Make form groups behave like rows
  .form-group {
    .make-row();
  }

  .form-control-static {
    padding-top: (@padding-base-vertical + 1);
  }

  // Only right align form labels here when the columns stop stacking
  @media (min-width: @screen-sm-min) {
    .control-label {
      text-align: right;
    }
  }

  // Validation states
  //
  // Reposition the icon because it's now within a grid column and columns have
  // `position: relative;` on them. Also accounts for the grid gutter padding.
  .has-feedback .form-control-feedback {
    top: 0;
    right: (@grid-gutter-width / 2);
  }
}

/* switcher */

.onoffswitch {
  display: inline-block;
  position: relative;
  min-width: 54px;
  height: @rhythmic-unit !important;
  vertical-align: middle;
  .user-select(none);

  input[type=checkbox] {
    display: none;

    &:checked {
      & + label {
        .onoffswitch-inner {
          margin-left: 0;
        }
        .onoffswitch-switch {
          right: 0;
        }
      }
    }

    &:disabled {
      & + label {
        opacity: .5;
      }
    }
  }

  > label {
    position: relative;
    display: block;
    overflow: hidden;
    cursor: pointer;
    font-weight: 400;
    border: @border-base solid @switcher-color;
    .rounded(@border-radius-base);
  }

  .onoffswitch-inner {
    width: 200%;
    margin-left: calc(~'-100% + 16px');
    text-transform: uppercase;

    .transition(margin 0.3s ease-in 0s);

    .on-caption,
    .off-caption {

      float: left;
      width: 50%;
      height: 16px;
      line-height: 16px;
      font-size: @font-size-small;
      color: #FFFFFF;
    }
    .on-caption {
      text-align: center;
      background-color: @switcher-color;
      color: #FFFFFF;
      margin-left: -8px;
    }
    .off-caption {
      text-align: center;
      background-color: #FFFFFF;
      color: @color-text-light;
    }
  }

  .onoffswitch-switch {
    display: block;
    width: 18px;
    margin: -2px;
    background: @input-bg;
    border: @border-base solid @switcher-color; // @todo: to variables
    border-radius: 3px;
    position: absolute;
    top: 0;
    bottom: 0;
    right: calc(~'100% - 14px'); // 14 - (width - double border)

    .transition(right 0.3s ease-in 0s);
  }
}

/* / switcher */
